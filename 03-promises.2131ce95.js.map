{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAASC,SAASC,cAAc,SAGhCC,GAFYF,SAASC,cAAc,yBAEvBD,SAASC,cAAc,yBACnCE,EAAWH,SAASC,cAAc,uBAClCG,EAAUJ,SAASC,cAAc,sBA6BvC,SAASI,EAAcC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAEjC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IApCPT,EAAOiB,iBAAiB,UACxB,SAAsBC,GACpBA,EAAEC,iBAMF,IALA,IAAMC,EAASC,OAAOlB,EAAUmB,OAC5BC,EAAQF,OAAOjB,EAASkB,OACtBE,EAAOH,OAAOhB,EAAQiB,OAGnBG,EAAW,EAAGA,GAAYL,EAAQK,GAAY,EACrDnB,EAAc,CAAEE,SAAAiB,EAAUhB,MAAAc,IACvBG,MAAK,SAAAnB,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACrBkB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGnEsB,OAAM,SAAAxB,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACtBkB,EAAA7B,GAAS8B,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAInEc,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst formEl = document.querySelector('.form');\nconst btnSubmit = document.querySelector('button[type=\"submit\"]');\n\nconst amountRef = document.querySelector('input[name=\"amount\"]');\nconst delayRef = document.querySelector('input[name=\"delay\"]');\nconst stepRef = document.querySelector('input[name=\"step\"]');\n\n\n\nformEl.addEventListener('submit', onFormSubmit);\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const amount = Number(amountRef.value);\n  let delay = Number(delayRef.value);\n  const step = Number(stepRef.value);\n \n\n  for (let position = 1; position <= amount; position += 1){\n    createPromise({ position, delay })\n      .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    \n  })\n      .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    \n  });\n    \n    delay += step;\n  }\n}\n\n\n\nfunction createPromise({ position, delay }) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n  \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n  })\n};\n\n\n\n\n\n\n \n\n\n\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$amountRef","$ce04d3a99e08e73b$var$delayRef","$ce04d3a99e08e73b$var$stepRef","$ce04d3a99e08e73b$var$createPromise","param","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","amount","Number","value","delay1","step","position1","then","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.2131ce95.js.map"}